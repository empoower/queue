<?php
namespace Models;
/**
 * Due to the fact that the number of days can be large and the program will slow down linearly,
 * I made a special algorithm for calculating interest!!!!!!
 * Firstly, we need to create a basic array of interest, which consists of 15 elements (3 * 5).
 * In the future we will use it for calculations. Thus the speed of the script will not depend on the number of days!
 * It is also very important to create an object of this class before using a callback function of channel!
 *
 */

class InterestQueue
{
    /**
     * Task conditions
     */
    const FIRST_FIFTEEN_DAYS = 15; //(3*5)
    const DIVISIBLE_BY_THREE = 1;
    const DIVISIBLE_BY_FIVE = 2;
    const DIVISIBLE_BY_BOTH_THREE_AND_FIVE = 3;
    const NOT_DIVISIBLE_BY_BOTH_THREE_AND_FIVE = 4;

    /**
     * JSON variables for reply
     */
    const SUM = 'sum';
    const DAYS = 'days';
    const INTEREST = 'interest';
    const TOTALSUM = 'totalSum';
    const TOKEN = 'token';


    private $basicAccountingElements = array();

    public function __construct()
    {
        /**
         * Createing the basic array of interest of first 15 days.
         * Is possible to make it static, but would be better if it will generated by script!
         *
         *  0=>['interest'=>4, 'interest_sum'=>4],
         *  1=>['interest'=>4, 'interest_sum'=>8],
         *  2=>['interest'=>1, 'interest_sum'=>9],
         *  3=>['interest'=>4, 'interest_sum'=>13],
         *  4=>['interest'=>2, 'interest_sum'=>15],
         *  5=>['interest'=>1, 'interest_sum'=>16],
         *  6=>['interest'=>4, 'interest_sum'=>20],
         *  7=>['interest'=>4, 'interest_sum'=>24],
         *  8=>['interest'=>1, 'interest_sum'=>25],
         *  9=>['interest'=>2, 'interest_sum'=>27],
         *  10=>['interest'=>4, 'interest_sum'=>31],
         *  11=>['interest'=>1, 'interest_sum'=>32],
         *  12=>['interest'=>4, 'interest_sum'=>36],
         *  13=>['interest'=>4, 'interest_sum'=>40],
         *  14=>['interest'=>3, 'interest_sum'=>43]
         *
         */

        $interestSum = 0;
        for ($i = 0; $i < self::FIRST_FIFTEEN_DAYS; $i++) {
            $interest = $this->calcInterest($i + 1);
            $interestSum = $interestSum + $interest;
            $this->basicAccountingElements[] = ['interest' => $interest, 'interest_sum' => $interestSum];
        }
    }

    /**
     * @param $days
     * @return int
     */
    public function calcInterest($days)
    {
        /**
         * RULE: If day is divisible by both three and five, the interest is: 3%
         *
         * If number of days divisble by 15 (3*5) then it means that number of days is divisble by 3 and 5
         * Also, we do offset, because the number of days may be less than 15
         */
        if (($days + self::FIRST_FIFTEEN_DAYS) % self::FIRST_FIFTEEN_DAYS == 0) {
            return self::DIVISIBLE_BY_BOTH_THREE_AND_FIVE;
        } else {

            /**
             * RULE: If day is divisible by three, the interest is: 1%
             */
            if ($days % 3 == 0) {
                return self::DIVISIBLE_BY_THREE;
            }

            /**
             * RULE: If day is divisible by five, the interest is: 2%
             */
            if ($days % 5 == 0) {
                return self::DIVISIBLE_BY_FIVE;
            }

            /**
             * RULE: If day is not divisible by either three or five, interest is: 4%
             */
            return self::NOT_DIVISIBLE_BY_BOTH_THREE_AND_FIVE;
        }

    }

    /**
     * @param $sum
     * @param $days
     * @return string
     */
    public function getInterests($sum, $days)
    {
        /**
         * integer value of division days by 15
         */
        $intVal = floor($days / self::FIRST_FIFTEEN_DAYS);

        /**
         * remainder of the division
         */
        $remVal = $days % self::FIRST_FIFTEEN_DAYS;

        /**
         * Total interest for 15 days should always be 43!
         * Take it from the prepared basic accounting array
         */
        $sumBasicAccountingElements = end($this->basicAccountingElements)['interest_sum'];

        /**
         * the amount of interest for all days
         */
        $percents = $intVal * $sumBasicAccountingElements;
        if ($remVal) {
            $percents = $percents + $this->basicAccountingElements[$remVal - 1]['interest_sum'];
        }

        /**
         * calculation of the proportion
         */
        $totalInterest = $percents * $sum / 100;

        /**
         * JSON output from the final array
         */
        $interest[self::SUM] = $sum;
        $interest[self::DAYS] = $days;
        $interest[self::INTEREST] = round($totalInterest,2);
        $interest[self::TOTALSUM] = round($totalInterest + $sum,2);
        $interest[self::TOKEN] = TOKEN;

        return $interest;
    }


}